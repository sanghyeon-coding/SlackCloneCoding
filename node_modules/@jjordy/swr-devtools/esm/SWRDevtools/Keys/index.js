import React from "react";
import { Rnd } from "react-rnd";
import CloseIcon from "../Icons/CloseIcon";
import ReloadIcon from "../Icons/ReloadIcon";
import themes from "../themes";
import useKeysState from "./useKeysState";
export default function Keys({ keys, selectedKey, onSelect, onClear, onRevalidate, theme, panelWidth, children = React.createElement(React.Fragment, null), }) {
    const { handleResize, state: { width, height }, } = useKeysState();
    return (React.createElement(React.Fragment, null,
        React.createElement(Rnd, { size: { width, height }, enableResizing: { right: true }, onResize: handleResize },
            React.createElement("div", { style: {
                    flex: 1,
                    textOverflow: "ellipsis",
                    overflow: "scroll",
                    position: "relative",
                    minHeight: 400,
                    height: "100%",
                    ...themes[theme].keys,
                } },
                React.createElement("div", { style: {
                        width: "100%",
                        boxSizing: "border-box",
                        backgroundColor: "#68E69EA3",
                        padding: "0.5rem",
                        fontSize: 14,
                        fontWeight: 900,
                        textOverflow: "ellipsis",
                    } }, "Cache Keys"),
                keys.map((cacheKey) => (React.createElement("div", { key: cacheKey, onClick: () => onSelect(cacheKey), style: {
                        width: "100%",
                        boxSizing: "border-box",
                        backgroundColor: cacheKey === selectedKey ? "#90DAE880" : undefined,
                        // padding: "0.4rem",
                    } },
                    React.createElement("div", { style: {
                            display: "flex",
                            alignItems: "center",
                            marginBottom: "0.2rem",
                            justifyContent: "stretch",
                            backgroundColor: "#044BD980",
                        } },
                        React.createElement("div", { style: { backgroundColor: "#D9528480" } },
                            React.createElement("button", { title: "Clear Item", onClick: () => onClear(cacheKey), style: {
                                    border: 0,
                                    color: "#fff",
                                    fontWeight: "bolder",
                                    height: "auto",
                                    backgroundColor: "rebeccapurple",
                                    fontSize: 12,
                                    padding: "0.6rem",
                                    cursor: "pointer",
                                    textTransform: "uppercase",
                                } },
                                React.createElement(CloseIcon, null))),
                        React.createElement("button", { title: "Revalidate", onClick: () => onRevalidate(cacheKey), style: {
                                border: 0,
                                color: "#fff",
                                fontWeight: "bolder",
                                fontSize: 12,
                                height: "auto",
                                backgroundColor: "#90DAE880",
                                cursor: "pointer",
                                padding: "0.6rem",
                                textTransform: "uppercase",
                            } },
                            React.createElement(ReloadIcon, null)),
                        React.createElement("span", { style: {
                                flex: "1 1 auto",
                                // fontFamily: "monospace",
                                wordBreak: "break-all",
                                textAlign: "center",
                                fontSize: 10,
                                letterSpacing: "0.05em",
                                fontWeight: 600,
                                textTransform: "uppercase",
                                cursor: "pointer",
                                padding: "0.2rem",
                            } }, cacheKey))))))),
        React.createElement("div", { style: { marginLeft: width, height: height, width: `calc(${panelWidth}px - ${width}px)` } }, children)));
}
