import React, { useState, useEffect, useRef } from "react";
import Data from "./Data";
import Keys from "./Keys";
import Panel from "./Panel";
import { usePrevious } from "./hooks";
import { useSWRConfig } from "swr";
import { useCallback } from "react";
function filtered(keys) {
    if (Array.isArray(keys)) {
        const errors = keys?.filter((key) => key.includes("$err$"));
        const inProgress = keys?.filter((key) => key.includes("$req$"));
        const rest = keys?.filter((key) => {
            if (key.includes("$err") || key.includes("$req$")) {
                return false;
            }
            return true;
        });
        return {
            errors,
            inProgress,
            rest,
        };
    }
    else {
        return { errors: [], inProgress: [], rest: [] };
    }
}
const DefaultOpenComponent = (React.createElement("span", { "aria-label": "Open Devtools", style: {
        fontSize: 16,
        boxSizing: "border-box",
        borderTopRightRadius: "3px",
        borderTopLeftRadius: "3px",
        backgroundImage: "linear-gradient(90deg,#0f2027,#203a43,#2c5364)",
        fontWeight: "bolder",
        color: "#fff",
    } },
    React.createElement("span", { style: { padding: "1rem", fontSize: 12 } }, "SWR DEVTOOLS")));
export function SWRDevtools({ debug = false, position = "right", CustomOpenComponent, openBtnPosition = "left", defaultOpen = false, }) {
    const { cache, mutate } = useSWRConfig();
    const [show, toggleShow] = useState(false);
    //@ts-ignore
    const ReactJson = useRef((props) => React.createElement(React.Fragment, null));
    const [toolbarPosition, setToolbarPosition] = useState(position);
    const prevPosition = usePrevious(toolbarPosition);
    const [cacheKeys, setCacheKeys] = useState(filtered(cache.keys()).rest);
    const [selectedCacheItemData, setSelectedCacheItemData] = useState(null);
    const [selectedCacheKey, setSelectedCacheKey] = useState(null);
    const handleToggleShow = () => toggleShow(!show);
    useEffect(() => toggleShow(defaultOpen), [defaultOpen]);
    const handleSetCacheKey = useCallback(() => {
        setCacheKeys(filtered(cache.keys()).rest);
        if (selectedCacheKey) {
            setSelectedCacheItemData(cache.get(selectedCacheKey));
        }
    }, [selectedCacheKey]);
    useEffect(() => cache.subscribe(handleSetCacheKey), [handleSetCacheKey]);
    const handleSelectedCacheItem = (key) => {
        setSelectedCacheKey(key);
        setSelectedCacheItemData(cache.get(key));
    };
    const clearCacheByKey = (key) => {
        cache.set(key, null);
    };
    const revalidate = (key) => {
        mutate(cache, key);
    };
    return (React.createElement(React.Fragment, null,
        !show && (React.createElement("div", { style: {
                position: "fixed",
                boxSizing: "border-box",
                boxShadow: "2px 2px 2px #222",
                bottom: 0,
                left: openBtnPosition === "left" ? 150 : null,
                right: openBtnPosition === "right" ? 150 : null,
                zIndex: 999999,
                backgroundColor: "#222",
                borderRadius: 6,
            } },
            React.createElement("button", { title: "Open SWR Devtools", onClick: handleToggleShow, style: {
                    border: 0,
                    backgroundColor: "transparent",
                    boxSizing: "border-box",
                    borderRadius: 6,
                    padding: 0,
                } }, CustomOpenComponent || DefaultOpenComponent))),
        React.createElement(Panel, { show: show, debug: debug, toolbarPosition: toolbarPosition, previousToolbarPosition: prevPosition || "", setToolbarPosition: setToolbarPosition, toggleShow: handleToggleShow }, ({ theme, width: panelWidth, resizing }) => (React.createElement("div", { style: {
                display: "flex",
                height: "100%",
                backgroundColor: theme === "Dark" ? "#231f20" : "#FFF",
                flex: toolbarPosition === "bottom" ? "1 1 auto" : 0,
            } },
            React.createElement("div", { style: { position: "relative", boxSizing: "border-box" } },
                React.createElement(Keys, { theme: theme, keys: cacheKeys, panelWidth: panelWidth, selectedKey: selectedCacheKey, onSelect: handleSelectedCacheItem, onClear: clearCacheByKey, onRevalidate: revalidate },
                    React.createElement(Data, { theme: theme, resizing: resizing, data: selectedCacheItemData, cacheKey: selectedCacheKey, JsonViewer: ReactJson, toolbarPosition: toolbarPosition }))))))));
}
export default SWRDevtools;
