{"version":3,"file":"94.js","mappings":"8LAEaA,GAAY,cAAH,mBAAG,CAAH,oHAQTC,GAAS,iBAAH,mBAAG,CAAH,iP,iNCEnB,IAiDA,EAjDsB,WACpB,I,IAAA,GAA0BC,EAAAA,EAAAA,MAAlBC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,GACLC,GAAaC,EAAAA,EAAAA,IAAO,mBAAD,OAAoBH,EAApB,kBAAuCC,GAAMG,EAAAA,GAAtEC,KACMC,GAAWH,EAAAA,EAAAA,IAAO,aAAcC,EAAAA,GAAtCC,KACR,G,GAAsCE,EAAAA,EAAAA,GAAS,I,EAA/C,E,8zBAAOC,EAAP,KAAaC,EAAb,KAA2BC,EAA3B,KAGA,GAAwEP,EAAAA,EAAAA,IAAM,0BACzDH,EADyD,gBACxCC,EADwC,4BAE5EG,EAAAA,GAGIO,GALN,EAAQN,KAAR,EAAwBO,QAKHC,EAAAA,EAAAA,cACnB,SAACC,GACCA,EAAEC,iBACFC,QAAQC,IAAIT,GAERA,MAAAA,GAAAA,EAAMU,QACRC,IAAAA,KAAA,0BAC2BnB,EAD3B,gBAC4CC,EAD5C,UACwD,CAEpDmB,QAASZ,IAEVa,MAAK,WACJX,EAAQ,OAETY,MAAMN,QAAQO,SAGrB,CAACf,KAIH,OAAKN,GAAaI,EAKhB,gBAACT,EAAD,KACE,gBAACC,EAAD,KACE,uBAAK0B,IAAKC,IAAAA,IAAavB,EAASwB,MAAO,CAAEC,EAAG,OAAQC,EAAG,UAAYC,IAAK3B,EAAS4B,WACjF,4BAAO5B,EAAS4B,WAElB,gBAACC,EAAA,EAAD,MACA,gBAACC,EAAA,EAAD,CAASxB,KAAMA,EAAMC,aAAcA,EAAcE,aAAcA,KAV1D","sources":["webpack://sleact-ts-front/./pages/DirectMessage/styles.tsx","webpack://sleact-ts-front/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n","import React, { useCallback } from 'react';\nimport { Container, Header } from '@pages/DirectMessage/styles';\nimport gravatar from 'gravatar';\nimport useSWR, { SWRResponse } from 'swr';\nimport { useParams } from 'react-router-dom';\nimport fetcher from '@utils/fetcher';\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { IDM } from '@typings/db';\n\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR(`/api/users`, fetcher); // 내 정보도 가져와야 DM을 보낼 때 누가 말하는지 구분할 수 있음\n  const [chat, onChangeChat, setChat] = useInput(''); // 이 state를 chatbox에서 관리하는 것이 아니라 onChangeChat, onSubmitForm에서\n\n  // 채팅 등록된 것 받아오는 API\n  const { data: chatData, mutate: mutateChat }: SWRResponse<IDM[], any> = useSWR<IDM[]>(\n    `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=1`,\n    fetcher,\n  );\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      console.log(chat);\n      // console.log('submit');\n      if (chat?.trim()) {\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            // 어떤 워크스페이스에 어떤 사람에게 chat을 보내라\n            content: chat,\n          })\n          .then(() => {\n            setChat(''); // 채팅 등록하면 기존에 채팅창에 있던 글자 지우기\n          })\n          .catch(console.error);\n      }\n    },\n    [chat],\n  );\n\n  // userData 또는 myData가 없는 경우는 로딩 중 (혹은 Error)\n  if (!userData || !myData) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"names":["Container","Header","useParams","workspace","id","userData","useSWR","fetcher","data","myData","useInput","chat","onChangeChat","setChat","onSubmitForm","mutate","useCallback","e","preventDefault","console","log","trim","axios","content","then","catch","error","src","gravatar","email","s","d","alt","nickname","ChatList","ChatBox"],"sourceRoot":""}